imageTag: 0.0.1
# DO NOT CHANGE THE LINE ABOVE. MAKE ALL CHANGES BELOW

# Global pvc for all workload
pvc:
  enabled: false
  name: ""
  accessModes: "ReadWriteMany"
  storageClassName: "default"
  capacity: "10Gi"

# Global image pull secret
imagePullSecrets: []

externalSecret:
  create: false
  name: "common-secret"
  annotations: {}
  # Currently, this chart only support 3 backends: azureKeyVaults, vaults and secretsManager

  # Azure KeyVaults
  # backendType: azureKeyVaults
  # userAssignedIdentityID: "" # Set the clientID of the user-assigned managed identity to use.
  # keyvaultName: "" # Name of the keyvault
  # tenantId: ""
  # data:
  #   - key: FOO # The environment variable key that will be present inside pod
  #     objectName: FOO # The Secret Object key on Azure Keyvaults
  #   - key: FOO2 # The environment variable key that will be present inside pod
  #     objectName: FOO2 # The Secret Object key on Azure Keyvaults

  # AWS Secrets Manager or HashiCorp Vault
  # backendType: secretsManager/vaults
  # roleArn: ""
  # controllerId: ""
  # region: "us-east-1"
  # data: []
  # dataFrom:
  #   - prod/common_module/env
  # template: {}

nameOverride: "common-module"
fullnameOverride: "common-module"

serviceAccount:
  create: true
  annotations: {}
  name: "common-module-service-account"

podDisruptionBudget:
  create: true
  minAvailable: 1

workloads:
  - name: api
    image:
      repository: docker.io
      pullPolicy: IfNotPresent

    # command: ["/bin/sh", "-c"]
    # args: ["python3 main.py"]

    replicaCount: 1
    ports:
      containerPort: 3000

    strategy:
      canary:
        steps:
          - setWeight: 50
          - pause: { duration: 1m }

    ingress:
      enabled: false
      className: ""
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: "100m"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
        kubernetes.io/ingress.class: nginx
      hosts:
        - host: common-api.jan.ai
          paths:
            - path: /
              pathType: Prefix
      tls: []

    instrumentation:
      enabled: false
      name: common-api-prod
      endpoint: http://otel-collector.opentelemetry-operator:4318
      image: ""
      servicename: common-api-prod
      sampler: 1
      xray: false
      # support types: python, dotnet, nodejs, nginx
      type: nginx
      nginxConfigPath: /etc/nginx/nginx.conf

    podAnnotations: {}

    podSecurityContext: {}

    securityContext: {}

    service:
      extenalLabel: {}
      type: ClusterIP
      port: 3000
      targetPort: 3000

    resources:
      limits:
        memory: 512M
      requests:
        cpu: 50m
        memory: 300M

    # volumes:
    #   - name: shared-data
    #     persistentVolumeClaim:
    #       claimName: common-module-pvc

    # volumeMounts:
    #   - name: shared-data
    #     mountPath: /storage

    env: []

    lifecycle: {}
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 95
      targetMemoryUtilizationPercentage: 95

    kedaScaling:
      enabled: false # ignore if autoscaling.enable = true
      cooldownPeriod: 30
      pollingInterval: 2
      minReplicas: 1
      maxReplicas: 5
      metricName: celery_queue_length
      query: celery_queue_length{queue_name="myqueue"} # change queue_name here
      serverAddress: http://prometheus-stag-kube-prome-prometheus.monitoring.svc:9090
      threshold: "3"

    nodeSelector: {}

    tolerations: []

    podSecurityGroup:
      enabled: false
      securitygroupid: []

    # Reloader Option
    reloader: "true"

    # VPA Option
    vpa:
      enabled: false
      updateMode: "Off"
      resourcePolicy: {}
