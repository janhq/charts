{{- if .Values.externalSecret.create -}}

{{- if eq .Values.externalSecret.backendType "azureKeyVaults" }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ include "common.externalSecretName" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
  {{- with .Values.externalSecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"          # Set to true for using managed identity
    userAssignedIdentityID: {{ .Values.externalSecret.userAssignedIdentityID }}
    keyvaultName: {{ .Values.externalSecret.keyvaultName }}      # Set to the name of your key vault
    cloudName: ""                         # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects: |
      array:
{{- range $key, $value := .Values.externalSecret.data }}
        - |
          objectName: {{ $value.objectName }}
          objectType: secret              # object types: secret, key, or cert
          objectVersion: ""               # [OPTIONAL] object versions, default to latest if empty
{{- end}}
    tenantId: {{ .Values.externalSecret.tenantId }}                # The tenant ID of the key vault
  secretObjects:                              # [OPTIONAL] SecretObjects defines the desired state of synced Kubernetes secret objects
  - data:
{{- range $key, $value := .Values.externalSecret.data }}
    - key: {{ $value.key }}                         # data field to populate
      objectName: {{ $value.objectName }}                      # name of the mounted content to sync; this could be the object name or the object alias
{{- end}}
    secretName: {{ .Values.externalSecret.name }}                     # name of the Kubernetes secret object
    type: Opaque 
    
{{- end }}

{{- if eq .Values.externalSecret.backendType "secretsManager" }}
apiVersion: "kubernetes-client.io/v1"
kind: ExternalSecret
metadata:
  name: {{ include "common.externalSecretName" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
  {{- with .Values.externalSecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  backendType: {{ .Values.externalSecret.backendType }}
  {{- if .Values.externalSecret.roleArn }}
  roleArn: {{ .Values.externalSecret.roleArn }}
  {{- end }}
  {{- if .Values.externalSecret.controllerId }}
  controllerId: {{ .Values.externalSecret.controllerId }}
  {{- end }}
  {{- if .Values.externalSecret.region }}
  region: {{ .Values.externalSecret.region }}
  {{- end }}
  {{- with .Values.externalSecret.data }}
  data:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.externalSecret.dataFrom }}
  dataFrom:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.externalSecret.template }}
  template:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}

{{- if eq .Values.externalSecret.backendType "vaults" }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "common.externalSecretName" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
  {{- with .Values.externalSecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-secret-manager
    kind: ClusterSecretStore
  target:
    name: {{ .Values.externalSecret.name }}
    creationPolicy: Owner
  dataFrom:
  - extract:
      key: {{ .Values.externalSecret.dataFrom }}
    
{{- end }}

{{- end }}
